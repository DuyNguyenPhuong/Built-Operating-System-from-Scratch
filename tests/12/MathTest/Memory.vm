function Memory.init 0
push constant 0
pop static 4
push constant 2048
pop static 0
push constant 16384
pop static 1
push static 1
push static 0
sub
pop static 2
push static 0
push static 4
add
push static 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 1
add
push static 4
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Memory.peek 0
push argument 0
push static 4
add
pop pointer 1
push that 0
return
function Memory.poke 0
push argument 0
push static 4
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Memory.alloc 0
push argument 0
push static 0
call Memory.allocRecursion 2
return
function Memory.allocRecursion 5
push argument 1
push static 4
add
pop pointer 1
push that 0
pop local 0
push argument 1
push constant 1
add
push static 4
add
pop pointer 1
push that 0
pop local 1
push local 0
push argument 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push argument 0
sub
push constant 1
sub
pop local 2
push argument 1
push static 4
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push argument 1
push local 2
add
push constant 1
add
pop local 4
push constant 1
neg
push local 4
add
push argument 0
push constant 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 4
return
label IF_FALSE0
push argument 1
push constant 1
add
push static 4
add
pop pointer 1
push that 0
push constant 0
eq
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
push argument 1
push constant 1
add
push static 4
add
pop pointer 1
push that 0
call Memory.allocRecursion 2
pop temp 0
label IF_FALSE1
push local 4
return
function Memory.insert 1
push argument 0
push constant 1
add
push static 4
add
pop pointer 1
push that 0
pop local 0
push argument 0
push constant 1
add
push static 4
add
pop pointer 1
push that 0
push constant 0
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push argument 1
call Memory.insert 2
pop temp 0
label IF_FALSE0
push argument 0
push constant 1
add
push static 4
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push argument 1
push static 4
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Memory.deAlloc 2
push argument 0
push constant 1
sub
pop local 0
push constant 1
neg
push argument 0
add
pop pointer 1
push that 0
pop local 1
push static 0
push local 0
call Memory.insert 2
pop temp 0
push constant 0
return
