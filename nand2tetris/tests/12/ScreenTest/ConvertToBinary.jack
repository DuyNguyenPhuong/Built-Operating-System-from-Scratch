// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/11/ConvertToBin/Main.jack

/**
 * Unpacks a 16-bit number into its binary representation:
 * Takes the 16-bit number stored in RAM[8000] and stores its individual
 * bits in RAM[8001..8016] (each location will contain 0 or 1).
 * Before the conversion, RAM[8001]..RAM[8016] are initialized to -1.
 *
 * The program should be tested as follows:
 * 1) Load the program into the supplied VM emulator
 * 2) Put some value in RAM[8000]
 * 3) Switch to "no animation"
 * 4) Run the program (give it enough time to run)
 * 5) Stop the program
 * 6) Check that RAM[8001]..RAM[8016] contains the correct binary result, and
 *    that none of these memory locations contains -1.
 */
class ConvertToBinary {
    static Array binary;
    /**
     * Initializes RAM[8001]..RAM[8016] to -1,
     * and converts the value in RAM[8000] to binary.

    function void main() {
	    var int value;
        do ConvertToBinary.fillMemory(8001, 16, -1); // sets RAM[8001]..RAM[8016] to -1
        let value = Memory.peek(8000);    // reads a value from RAM[8000]
        do ConvertToBinary.convert(value);           // performs the conversion
        return;
    }
	*/

    /** Converts the given decimal value to binary, and puts
     *  the resulting bits in binary array */
    function int convert(int value,int pointer) {
    	var int mask, position;
    	var boolean loop;
      //var Array binary;
      var int temp;

      let binary = pointer;
	    //let binary = Array.new(16);
    	let position = -1; // acces first element when +1 happens in for loop
    	let loop = true;
    	while (loop) {
    	    let position = position + 1;
    	    let mask = ConvertToBinary.nextMask(mask);

    	    if (position < 16) {

    	        if (~((value & mask) = 0)) {
    	            //do Memory.poke(8000 + position, 1);
			              let binary[position] = 1;
       	        }
    	        else {
    	            //do Memory.poke(8000 + position, 0);
		                let binary[position] = 0;
      	        }
    	    }
    	    else {
    	        let loop = false;
    	    }
    	}
      let pointer = binary;
    	return pointer;
    }

    /** Returns the next mask (the mask that should follow the given mask). */
    function int nextMask(int mask) {
    	if (mask = 0) {
    	    return 1;
    	}
    	else {
	    //return mask * 2;
		// need to add instead of multiply
		return (mask + mask);
    	}
    }



	function int binaryToInt(int inputPointer){
		var int total;
    var Array input;
    let input = inputPointer;
		let total = 0;
    /**
		if( input[15] = 1 ){ let total = total + 1;}
		if( input[14] = 1 ){ let total = total + 2;}
		if( input[13] = 1 ){ let total = total + 4;}
		if( input[12] = 1 ){ let total = total + 8;}
		if( input[11] = 1 ){ let total = total + 16;}
		if( input[10] = 1 ){ let total = total + 32;}
		if( input[9] = 1 ){ let total = total + 64;}
		if( input[8] = 1 ){ let total = total + 128;}
		if( input[7] = 1 ){ let total = total + 256;}
		if( input[6] = 1 ){ let total = total + 512;}
		if( input[5] = 1 ){ let total = total + 1024;}
		if( input[4] = 1 ){ let total = total + 2048;}
		if( input[3] = 1 ){ let total = total + 4096;}
		if( input[2] = 1 ){ let total = total + 8192;}
		if( input[1] = 1 ){ let total = total + 16384;}
		if( input[0] = 1 ){ let total = total + 32767;} // add + 1 to help
    */

    if( input[0] = 1 ){ let total = total + 1;}
		if( input[1] = 1 ){ let total = total + 2;}
		if( input[2] = 1 ){ let total = total + 4;}
		if( input[3] = 1 ){ let total = total + 8;}
		if( input[4] = 1 ){ let total = total + 16;}
		if( input[5] = 1 ){ let total = total + 32;}
		if( input[6] = 1 ){ let total = total + 64;}
		if( input[7] = 1 ){ let total = total + 128;}
		if( input[8] = 1 ){ let total = total + 256;}
		if( input[9] = 1 ){ let total = total + 512;}
		if( input[10] = 1 ){ let total = total + 1024;}
		if( input[11] = 1 ){ let total = total + 2048;}
		if( input[12] = 1 ){ let total = total + 4096;}
		if( input[13] = 1 ){ let total = total + 8192;}
		if( input[14] = 1 ){ let total = total + 16384;}
		if( input[15] = 1 ){ let total = total + 32767+1;} // add + 1 to help

		return total;
	}

    /** Fills 'length' consecutive memory locations with 'value',
      * starting at 'startAddress'.
    function void fillMemory(int startAddress, int length, int value) {
        while (length > 0) {
            do Memory.poke(startAddress, value);
            let length = length - 1;
            let startAddress = startAddress + 1;
        }
        return;
    }
	*/
}
