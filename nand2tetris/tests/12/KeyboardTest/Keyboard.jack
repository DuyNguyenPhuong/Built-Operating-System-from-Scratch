/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    /** Initializes the keyboard. */
    function void init() {
      return;
    }

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
      // Memory.peek(address)
      var char keyScanCode;
      let keyScanCode = Memory.peek(24576);
      if(~(keyScanCode = 0)){
        return keyScanCode;
      }else{
        return 0;
      }

    }

    /**
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character
     * of the pressed key.
     */
    function char readChar() {
      var char c;
      // display the cursor
      do Output.printChar(0); // black box is the cursor
      // waits until the key is pressed
      while( Keyboard.keyPressed() = 0){
        //  do nothing until key is pressed
      }

      let c =  Keyboard.keyPressed();
      // waits until the key is released
      while( ~(Keyboard.keyPressed() = 0)) {
        // do nothing until key is released
      }
      // dislpay the cursor at the current cursor location
      do Output.backSpace(); // erase the black box or cursor
      do Output.printChar(c); // print the char or display the char

      // advace the cursor
      // printChar takes care of advancing the cursor
      return c;
    }

    /**
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
      var String str;
      var char newLine, c;
      let newLine = 128; // newline ascii code is 128
      let c = 0;
      let str = String.new(32); // we con only have 32 words until we reach the right edge of the screen
      do Output.printString(message);


      while(~(c = newLine)){
        // show the cursor
        //do Output.printChar(0); // black box is the cursor
        // get the char
        let c = Keyboard.readChar();
        // echo to the screen
        // backspace is 129, got back and take one off the string and dont append if new line
        if(c = 129){
          // only erase if string is not 0
          if(~(str.length() = 0)){
            do Output.backSpace(); // move the cursor back
            do str.eraseLastChar(); // erases the last character because we used the backspace
          }
        }

        // only append if it is not a new line and not  129
        if( (~(c = 129)) & (~(c = newLine))) {
          //do Output.printChar(c); // print the char or display the char
          do str.appendChar(c); // append char to string until newline encountered
        }

      }
      // diplay new line
      //do Output.println(); // print the new line
      //do Output.printString(str);
      return str;

    }

    /**
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces.
     */
    function int readInt(String message) {
      var String str;
      var char newLine, c;
      let newLine = 128; // newline ascii code is 128
      let c = 0;
      let str = String.new(32); // we con only have 32 words until we reach the right edge of the screen
      do Output.printString(message);


      while(~(c = newLine)){
        // show the cursor
        //do Output.printChar(0); // black box is the cursor
        // get the char
        let c = Keyboard.readChar();
        // echo to the screen
        // backspace is 129, got back and take one off the string and dont append if new line
        if(c = 129){
          // only erase if string is not 0
          if(~(str.length() = 0)){
            do Output.backSpace(); // move the cursor back
            do str.eraseLastChar(); // erases the last character because we used the backspace
          }
        }

        // only append if it is not a new line and not  129
        if( (~(c = 129)) & (~(c = newLine))) {
          //do Output.printChar(c); // print the char or display the char
          do str.appendChar(c); // append char to string until newline encountered
        }

      }
      // diplay new line
      //do Output.println(); // print the new line
      //do Output.printString(str);


      return str.intValue();
    }
}
