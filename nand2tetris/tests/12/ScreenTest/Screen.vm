function Screen.init 0
push constant 16384
pop static 5
push constant 16
call Array.new 1
pop static 0
push constant 16
call Array.new 1
pop static 1
push static 0
pop static 2
push static 1
pop static 3
push constant 0
pop static 6
push constant 0
return
function Screen.clearScreen 2
push static 5
pop local 0
push constant 24575
pop local 1
label WHILE_EXP0
push local 0
push local 1
lt
not
if-goto WHILE_END0
push local 0
push static 6
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.setColor 0
push argument 0
not
pop static 4
push constant 0
return
function Screen.mod 2
push constant 0
pop local 0
push argument 0
pop local 1
label WHILE_EXP0
push local 1
push argument 1
push constant 1
sub
gt
not
if-goto WHILE_END0
push argument 1
push local 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop local 1
push local 1
return
goto IF_END0
label IF_FALSE0
push local 1
push argument 1
sub
pop local 1
label IF_END0
goto WHILE_EXP0
label WHILE_END0
push local 1
return
function Screen.power 3
push constant 1
pop local 0
push argument 0
pop local 2
label WHILE_EXP0
push local 0
push argument 1
lt
not
if-goto WHILE_END0
push constant 1
pop local 1
label WHILE_EXP1
push local 1
push argument 0
lt
not
if-goto WHILE_END1
push local 2
push local 2
add
pop local 2
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push argument 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
pop local 2
label IF_FALSE0
push local 2
return
function Screen.drawPixel 4
push constant 32
push argument 1
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push static 5
push local 0
add
call Memory.peek 1
pop local 1
push argument 0
push constant 16
call Screen.mod 2
pop local 2
push constant 2
push local 2
call Screen.power 2
pop local 3
push local 3
push static 3
call ConvertToBinary.convert 2
pop static 3
push local 1
push static 2
call ConvertToBinary.convert 2
pop static 2
push static 3
push static 2
push static 4
call Screen.bitwiseOR 3
pop temp 0
push static 2
call ConvertToBinary.binaryToInt 1
pop local 1
push static 5
push local 0
add
push local 1
call Memory.poke 2
pop temp 0
push constant 0
return
function Screen.printArray 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 16
lt
not
if-goto WHILE_END0
push local 0
push argument 0
add
pop pointer 1
push that 0
call Output.printInt 1
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.bitwiseOR 3
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 16
lt
not
if-goto WHILE_END0
push local 0
push argument 0
add
pop pointer 1
push that 0
pop local 1
push local 0
push argument 1
add
pop pointer 1
push that 0
pop local 2
push local 1
push local 2
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push argument 1
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push argument 2
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 1
push constant 1
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
push argument 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE2
label IF_FALSE1
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawLine 12
push argument 2
push argument 0
sub
pop local 2
push argument 3
push argument 1
sub
pop local 3
push constant 0
not
pop local 11
push constant 0
pop local 7
push constant 0
pop local 6
push local 2
push constant 0
lt
push local 3
push constant 0
lt
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
call Math.abs 1
pop local 2
push local 3
call Math.abs 1
pop local 3
push argument 0
pop local 4
push argument 1
pop local 5
push argument 2
pop argument 0
push argument 3
pop argument 1
push local 4
pop argument 2
push local 5
pop argument 3
label IF_FALSE0
push local 2
push constant 0
lt
push local 3
push constant 0
gt
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
not
pop local 6
push local 2
call Math.abs 1
pop local 2
label IF_FALSE1
push local 2
push constant 0
gt
push local 3
push constant 0
lt
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
not
pop local 7
push local 3
call Math.abs 1
pop local 3
label IF_FALSE2
push local 2
push constant 0
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
pop local 11
push local 3
push constant 0
lt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 3
call Math.abs 1
pop local 3
push argument 3
pop argument 1
label IF_FALSE4
label WHILE_EXP0
push local 3
push constant 0
gt
not
if-goto WHILE_END0
push argument 0
push argument 1
push local 3
add
call Screen.drawPixel 2
pop temp 0
push local 3
push constant 1
sub
pop local 3
goto WHILE_EXP0
label WHILE_END0
label IF_FALSE3
push local 3
push constant 0
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 0
pop local 11
push local 2
push constant 0
lt
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 2
call Math.abs 1
pop local 2
push argument 2
pop argument 0
label IF_FALSE6
label WHILE_EXP1
push local 2
push constant 0
gt
not
if-goto WHILE_END1
push argument 0
push local 2
add
push argument 1
call Screen.drawPixel 2
pop temp 0
push local 2
push constant 1
sub
pop local 2
goto WHILE_EXP1
label WHILE_END1
label IF_FALSE5
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 10
push local 11
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
label WHILE_EXP2
push local 0
push local 2
lt
push local 0
push local 2
eq
or
push local 1
push local 3
lt
push local 1
push local 3
eq
or
and
not
if-goto WHILE_END2
push local 7
push local 6
or
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push local 7
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push argument 0
push local 0
add
push argument 1
push local 1
sub
call Screen.drawPixel 2
pop temp 0
goto IF_END9
label IF_FALSE9
push argument 0
push local 0
sub
push argument 1
push local 1
add
call Screen.drawPixel 2
pop temp 0
label IF_END9
goto IF_END8
label IF_FALSE8
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawPixel 2
pop temp 0
label IF_END8
push local 10
push constant 0
lt
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push local 0
push constant 1
add
pop local 0
push local 10
push local 3
add
pop local 10
goto IF_END10
label IF_FALSE10
push local 1
push constant 1
add
pop local 1
push local 10
push local 2
sub
pop local 10
label IF_END10
goto WHILE_EXP2
label WHILE_END2
label IF_FALSE7
push constant 0
return
function Screen.drawRectangle 3
push argument 2
push argument 0
sub
pop local 0
push argument 3
push argument 1
sub
pop local 1
push local 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
pop local 2
push argument 2
pop argument 0
push local 2
pop argument 2
push local 0
call Math.abs 1
pop local 0
label IF_FALSE0
label WHILE_EXP0
push local 0
push constant 0
gt
not
if-goto WHILE_END0
push argument 0
push local 0
add
push argument 1
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawLine 4
pop temp 0
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 3
push argument 2
pop local 1
label WHILE_EXP0
push local 1
push argument 2
neg
gt
not
if-goto WHILE_END0
push argument 2
push argument 2
call Math.multiply 2
push local 1
push local 1
call Math.multiply 2
sub
pop local 2
push local 2
call Math.sqrt 1
pop local 0
push argument 0
push local 0
sub
push argument 1
push local 1
add
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawLine 4
pop temp 0
push local 1
push constant 1
sub
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
